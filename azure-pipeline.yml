trigger:
  batch: true
  branches:
    include: 
    - master


variables:
  buildConfiguration: 'Release'
  projectsToBuild: '**/*.sqlproj'
  server-dns: 'aspnetcontainersapp-server.database.windows.net'
  # db: 'fasotestapp-db'
  # login: 'dbadmin'
  # password: 'Marine1775$$'

parameters:
  - name: nightly
    type: boolean
    default: false

stages:

# Build Stage
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: 'windows-latest'
    steps:
    # Build and publish the application library
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/BookAppCore*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/BookAppCore*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

        
    # Publish the app as an artifact
    # - publish: $(Build.StagingDirectory)
    #   artifact: app

    
    - task: MSBuild@1
      displayName: 'Build solution BookApp.Data'
      inputs:
       # solution: BookApp.Data 
        solution: '$(projectsToBuild)'
        msbuildArguments: '/p:DSP=Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider /p:CmdLineInMemoryStorage=True'

    - task: CopyFiles@2
      displayName: 'Copy Files to: Dacpac file'
      inputs:
        SourceFolder: BookApp.Data 
        Contents: '**/*'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()


# - stage: Deploy 
#   jobs:
#   - job: "DeploySQLServer"
#     pool:
#       vmImage: 'windows-latest' 
#     displayName: 'deploying sql'
#     variables:
#       - group: Global
    
#     steps:
#     - task: DownloadBuildArtifacts@1
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: 'drop'
#         downloadPath: '$(System.ArtifactsDirectory)'
#     - task: SqlAzureDacpacDeployment@1
#       displayName: 'Deploying SQL Using dacpa'
#       inputs:
#         azureSubscription: 'Pay-As-You-Go-Valid (7983f3c2-dccb-4697-908f-0c57dfe0ec41)'
#         AuthenticationType: 'server'
#         ServerName: '$(serverdns)'
#         DatabaseName: '$(db)'
#         SqlUsername: '$(dbuser)'
#         SqlPassword: '$(password)'
#         deployType: 'DacpacTask'
#         DeploymentAction: 'Publish'
#         DacpacFile: '$(System.ArtifactsDirectory)\drop\bin\Debug\*.dacpac'
#         IpDetectionMethod: 'AutoDetect'
    
  
- stage: deploy_to_dev
  displayName: Deploy to dev
  dependsOn: build
  condition: and(succeeded(), eq('${{ parameters.nightly }}', 'false'))
  jobs: 
  - deployment: deploy
    environment: Dev
    displayName: 'deploying web  app'
    pool:
      vmImage: 'windows-2022'
    variables:
      - group: Global
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadBuildArtifacts@1
              displayName: 'download artifacts web app'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: SqlAzureDacpacDeployment@1
              displayName: 'Deploying SQL Using dacpa'
              inputs:
                azureSubscription: 'Pay-As-You-Go-Valid (7983f3c2-dccb-4697-908f-0c57dfe0ec41)'
                AuthenticationType: 'server'
                ServerName: '$(serverdns)'
                DatabaseName: '$(db)'
                SqlUsername: '$(dbuser)'
                SqlPassword: '$(password)'
                deployType: 'DacpacTask'
                DeploymentAction: 'Publish'
                DacpacFile: '$(System.ArtifactsDirectory)\drop\bin\Debug\*.dacpac'
                IpDetectionMethod: 'AutoDetect'  

            - task: AzureRmWebAppDeployment@4
              displayName: 'deploying web app'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Pay-As-You-Go-Valid (7983f3c2-dccb-4697-908f-0c57dfe0ec41)'
                appType: 'webApp'
                WebAppName: 'fasotestapp'
                DeploymentType: webDeploy
                packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'

- stage: DeployToTest 
  displayName: Deploy_to_test
  dependsOn: deploy_to_dev
  condition: succeeded()
  jobs:
  - deployment: Deploy_to_test
    displayName: 'deploying sql'
    environment: Test
    pool:
      vmImage: 'windows-latest'   
    variables:
      - group: Test
    strategy:
     runOnce:
      deploy:   
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'
        - task: SqlAzureDacpacDeployment@1
          displayName: 'Deploying SQL Using dacpa'
          inputs:
            azureSubscription: 'Pay-As-You-Go-Valid (7983f3c2-dccb-4697-908f-0c57dfe0ec41)'
            AuthenticationType: 'server'
            ServerName: '$(serverdns)'
            DatabaseName: '$(db)'
            SqlUsername: '$(dbuser)'
            SqlPassword: '$(password)'
            deployType: 'DacpacTask'
            DeploymentAction: 'Publish'
            DacpacFile: '$(System.ArtifactsDirectory)\drop\bin\Debug\*.dacpac'
            IpDetectionMethod: 'AutoDetect'
    
        - task: AzureRmWebAppDeployment@4
          displayName: 'deploying web app'
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'Pay-As-You-Go-Valid (7983f3c2-dccb-4697-908f-0c57dfe0ec41)'
            appType: 'webApp'
            WebAppName: '$(webapp)'
            packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'



























